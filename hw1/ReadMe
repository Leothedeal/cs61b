HW1：
前前后后写码写了一天加一个下午，还是太慢了。不过好在完成度比较高，TTFAF和最后的
用户交互都能跑。整体感觉这次的HW难度不大，但是由于各种原因还是拖了我的进度。比如写
Test的时候直接被绕晕了，debug花了将近一个晚上的时间。遇到的问题也千奇百怪，甚至第一次
调的时候TTFAF的那段音乐真的像敲桌子lol；
这次HW的主体部分是用java来实现一个吉他模拟器，先是创建了一个BoundedQueue的接口，然后用
AbstractBoundedQueue来实现这个接口，最后用一个ArrayRingBuffer的class来进行具体方法的实现，
用到的数据结构josh称之为ring buffer，也就是环状缓冲区，实际上也是用数组来实现的。具体要注意dequeue和
enqueue以及peek这三个method在遇到first/last=capacity的情况应该如何处理，这里因为没想清楚，浪费了我
很多时间。然后是创建一个GuitarString的类，来实现Karplus-Strong算法（用计算机来对声音进行模拟合成）：确定一个
采样频率，创建一个Ringbuffer，先用随机数产生的白噪音填满整个缓冲区，然后再对前两个数取平均再乘以一个采样系数，
将得到的结果enque，再dequeue。循环往复，便可以产生声音。当GuitarString和ArrayRingBuffer都写好之后，就可以
播放TTFAT了，很带劲，也有一丢丢成就感。然后是要实现GuitarHero，根据提示以及GuitarHeroLite可以比较容易写出来，
虽然因为对到底该用什么类型的数组理解不深浪费了一些时间。
启示：写完这次HW，还是有一些启示的，首先我以前喜欢一上来就直接上IDEA写码，text看完就丢一边，写完根据报错来改代码，
这样做费时费力效率太低，不行了又去google，一弄就是一上午一下午。这次刚开始也是这样，后来算是明白了josh在lecture中讲
的abstract thinking的重要性，后来我都是在草稿本上先复盘整个过程，手写代码，弄清楚之后上IDEA就编译一遍过了。第二就是
写TEST的时候一定要弄清楚，不能搞混，我写test的时候由于没弄清楚过程，直接把自己搞晕了，debug弄了一晚上。
感慨：CS真的太强大了，和其他学科的结合就能产生如此美妙的效果，全程跟下来有一种自己搭模型的感觉。另外UCB的hw，proj设置
简直让人赞不绝口，对比国内真是不知道高到哪里去了。